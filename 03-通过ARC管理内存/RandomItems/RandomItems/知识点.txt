1.当程序执行某个方法（或函数）时，会从内存中名分栈（stack）的区域分配一块内存空间，这块内存空间称为帧（frame）。帧负责保存程序在方法内声明的变量的值。
2.堆包含了大量无序的活动变量，需要通过指针来保存这些对象在堆中的地址。
3.对象的拥有：
    当某个方法（或函数）有一个指向某个对象的局部变量时，可以称该变量拥有（own）该变量所指向的对象
    当某个对象有一个指向其他对象的实例变量时，可以称该对象拥有该实例变量所指向的对象。

4.如果某个对象没有拥有者，就应该将其释放掉。没有拥有者的对象是孤立的，程序无法向其发送消息。保留这样的对象只会浪费宝贵的内存空间，导致内存泄露（memory leak）问题。
5.如果某个对象有一个或多个拥有者，就必须保留不能释放。如果释放了某个对象，但其他对象或方法仍然的指向该对象的指针（准确地说，是指向该对象释放前的地址），那么向该指针指向的对象发送消息就会使应用崩溃。释放正在使用的对象的错误称为过早释放。指向不存在的对象的指针称为空指针（dangling pointer）或者空引用（dangling reference）。
6下列情况会使对象失去拥有者:
    当程序修改某个指向特定对象的变量并将其指向另一个对象时。
    当程序将某个指向特定对象的变量设置为nil时。
    当程序释放对象的某个拥有者时。
    当从collection类中删除对象时。
7.在决定将哪个指针改为弱引用前，可以先为存在强引用循环问题的多个对象决定相应的父-子关系（parent-child relationship）。确定父-子关系后，就可以让父对象拥有子对象，并确保子对象不会拥有父对象。




